<?xml version="1.0" encoding="UTF-8"?>  

<databaseChangeLog
   xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:pro="http://www.liquibase.org/xml/ns/pro"
   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.1.xsd
      http://www.liquibase.org/xml/ns/pro 
      http://www.liquibase.org/xml/ns/pro/liquibase-pro-4.1.xsd">
      
    <changeSet id="1" author="willsunnn">
    <sql>
    create table users (
        user_id bigserial,
        username text NOT NULL,
        PRIMARY KEY (user_id),
        UNIQUE (username)
    );

    create table device (
        device_id bigserial,
        user_id bigint,
        primary key (device_id),
        foreign key (user_id) references users(user_id)
    );

    create table notification (
        notification_id bigserial,
        user_id bigint not null,
        primary key (notification_id),
        foreign key (user_id) references users(user_id)
    );

    create table email_notification (
        notification_id bigint,
        email text not null,
        primary key (notification_id),
        foreign key (notification_id) references notification(notification_id) on delete cascade
    );

    create table text_notification (
        notification_id bigint,
        phone_number text not null,
        primary key (notification_id),
        foreign key (notification_id) references notification(notification_id) on delete cascade
    );

    create table past_locations (
        location_id bigserial,
        device_id bigint not null,
        location_time timestamp not null,
        location_lat float not null,
        location_lon float not null,
        primary key (location_id),
        foreign key (device_id) references device(device_id) on delete cascade
    );

    create table device_notification_methods (
        device_id bigint not null,
        notification_id bigint not null, 
        primary key (device_id, notification_id),
        foreign key (device_id) references device(device_id),
        foreign key (notification_id) references notification(notification_id)
    );

    create table crash_detected (
        crash_id bigserial,
        device_id bigint not null,
        crash_time timestamp not null,
        crash_lat float not null,
        crash_lon float not null,
        primary key (crash_id),
        foreign key (device_id) references device(device_id) on delete cascade
    );

    create type status as ENUM('Pending', 'Sent', 'Failed');

    create table crash_detected_notification (
        crash_id bigint,
        notification_id bigint,
        notification_status Status not null,
        primary key (crash_id, notification_id),
        foreign key (crash_id) references crash_detected(crash_id),
        foreign key (notification_id) references notification 
    );
    </sql>
    </changeSet> 

</databaseChangeLog>